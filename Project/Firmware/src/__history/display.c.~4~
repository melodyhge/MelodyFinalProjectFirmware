#include "display.h"
#include "main.h"
#include "rtc.h"
#include "tempr.h"
#include "scheduler.h"

// Example GPIO setup for segment control, adjust these as necessary
#define DISPLAY_INTERVAL_MS 10000 // Switch display every 10 seconds

typedef enum {
    DISPLAY_TIME,
    DISPLAY_DATE,
    DISPLAY_TEMPERATURE
} display_mode_t;

static display_mode_t current_mode = DISPLAY_TIME; // Start with time display

/**
 * Initialize the display hardware
 * @return true if initialized successfully, false otherwise
 */
bool init_display(void) {
    // Initialize display hardware
    // Set GPIO pins or other display-related setup
    clear_display();
    return true; // Indicate success
}

/**
 * Task to manage the display of time, date, and temperature
 * @param me Task handle
 * @param msg Message pointer (not used here)
 * @param arg Additional arguments (not used here)
 */
void display_task(s_task_handle_t me, s_task_msg_t **msg, void *arg) {
    static uint32_t last_switch_ticks = 0; // Last time the display was switched
    uint32_t current_ticks = get_system_ticks();

    // Only update the display every DISPLAY_INTERVAL_MS
    if ((current_ticks - last_switch_ticks) >= DISPLAY_INTERVAL_MS) {
        last_switch_ticks = current_ticks; // Update the last switch time

        // Switch the display mode
        switch (current_mode) {
            case DISPLAY_TIME: {
                uint8_t hours, minutes, seconds;
                if (get_time_date(&hours, &minutes, &seconds, NULL, NULL, NULL, NULL)) {
                    display_time(hours, minutes);
                }
                current_mode = DISPLAY_DATE;
                break;
            }
            case DISPLAY_DATE: {
                uint8_t date, month, year;
                if (get_time_date(NULL, NULL, NULL, NULL, &date, &month, &year)) {
                    display_date(date, month, year);
                }
                current_mode = DISPLAY_TEMPERATURE;
                break;
            }
            case DISPLAY_TEMPERATURE: {
                float temperature = read_temperature();
                display_temperature(temperature);
                current_mode = DISPLAY_TIME;
                break;
            }
        }
    }
}

/**
 * Display time on a 7-segment display
 * @param hours Current hours
 * @param minutes Current minutes
 */
void display_time(uint8_t hours, uint8_t minutes) {
    clear_display();
    write_digit(hours / 10, 0); // Display ten's place of hours
    write_digit(hours % 10, 1); // Display one's place of hours
    write_digit(minutes / 10, 2); // Display ten's place of minutes
    write_digit(minutes % 10, 3); // Display one's place of minutes
}

/**
 * Display date on a 7-segment display
 * @param date Current day
 * @param month Current month
 * @param year Current year (last two digits)
 */
void display_date(uint8_t date, uint8_t month, uint8_t year) {
    clear_display();
    write_digit(date / 10, 0); // Display ten's place of date
    write_digit(date % 10, 1); // Display one's place of date
    write_digit(month / 10, 2); // Display ten's place of month
    write_digit(month % 10, 3); // Display one's place of month
}

/**
 * Display temperature on a 7-segment display
 * @param temperature Current temperature
 */
void display_temperature(float temperature) {
    clear_display();
    int temp = (int)temperature; // Convert float to int, discard decimal
    write_digit(temp / 10, 0); // Display ten's place of temperature
    write_digit(temp % 10, 1); // Display one's place of temperature
}

/**
 * Clear the display
 */
void clear_display(void) {
    // Code to turn off all segments
}

/**
 * Function to write a number to a specific digit
 * @param digit The number to display (0-9)
 * @param position The position on the display
 */
void write_digit(uint8_t digit, uint8_t position) {
    // Hardware-specific code to display a number on a given digit
}

